<?php

/**
 * @file
 * Contains menu_link_weight_extended.module..
 */

use Drupal\Component\Utility\Html;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\menu_link_content\Form\MenuLinkContentForm;
use Drupal\system\Entity\Menu;

/**
 * Implements hook_entity_type_build()
 *
 * Add the menu_link_weight_extended form controllers to the entity type config object.
 */
function menu_link_weight_extended_entity_type_build(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  $entity_types['menu']->setFormClass('edit_menu_link_weight_extended', 'Drupal\menu_link_weight_extended\MenuFormLinkController');
  $entity_types['menu']->setFormClass('edit_menu_link_weight_extended_slice', 'Drupal\menu_link_weight_extended\MenuSliceFormController');
}

/**
 * Implements hook_form_alter().
 */
function menu_link_weight_extended_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if ($form_state->getBuildInfo()['callback_object'] instanceof MenuLinkContentForm) {

    /** @var \Drupal\Core\Render\ElementInfoManagerInterface $element_info_manager */
    $element_info_manager = \Drupal::service('plugin.manager.element_info');

    // Prevent the "weight" widget from being displayed.
    $form['weight']['#access'] = FALSE;

    foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'menu_link_weight_extended_menu_ui_form_submit';
      }
    }

    // Add the Menu Link weight fieldset.
    $defaults = $element_info_manager->getInfo('fieldset');
    $form['menu_link_weight'] = array(
      '#type' => 'fieldset',
      '#title' => t('Menu link weight'),
      '#prefix' => '<div id="menu-link-weight-wrapper">',
      '#suffix' => '</div>',
      '#process' => array_merge($defaults['#process'], ['menu_link_weight_extended_menu_ui_element_process']),
      '#weight' => $form['menu_parent']['#weight'] + 0.1,
    );
    $form['menu_link_weight']['table'] = array(
      '#type' => 'table',
      '#header' => array(
        'name' => t('Name'),
        'weight' => t('Weight'),
      ),
      '#id' => 'menu-link-weight-reorder',
      '#tabledrag' => array(array(
        'action' => 'order',
        'relationship' => 'sibling',
        'group' => 'menu-link-weight-item-weight',
      )),
      // Remove the 'table' element from the form value structure.
      '#parents' => ['menu', 'menu_link_weight'],
    );
  }

  // Define the "db_weights" element, which will hold hidden fields with
  // the values of the menu links in the database. Upon validation we will
  // check whether the weights are still the same as when the form was
  // built, to make sure users won't overwrite each other's changes.
  $form['menu']['link']['db_weights'] = array(
    '#tree' => TRUE,
  );
  $form['#attached']['library'][] = 'menu_link_weight/menu_link_weight';

  // Define the AJAX callback for changes in the Parent element.
  $form['menu_parent']['#ajax'] = array(
    'callback' => 'menu_link_weight_menu_ui_parent_ajax_callback',
    'wrapper' => 'menu-link-weight-wrapper',
  );

  // This next button will not be displayed if JS is enabled.
  $form['menu_link_weight_nojs'] = array(
    '#type' => 'submit',
    '#value' => menu_link_weight_get_button_text(),
    // No need to validate when submitting this.
    '#limit_validation_errors' => array(),
    '#validate' => array(),
    '#submit' => array('menu_link_weight_node_form_update_parent_submit'),
    '#attributes' => ['class' => ['js-hide']],
  );

  $form['#entity_builders'][] = 'menu_link_weight_extended_menu_ui_set_link_weight';
}

function menu_link_weight_extended_menu_ui_form_submit($form, FormStateInterface $form_state) {
  // Return on empty submissions.
  if (!$form_state->hasValue(['menu', 'menu_link_weight'])) {
    return;
  }

  /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');

  $connection = \Drupal::database();
  $transaction = $connection->startTransaction();

  try {
    // Because the form elements were keyed with the item ids from the database,
    // we can simply iterate through the submitted values.
    foreach ($form_state->getValue(['menu', 'menu_link_weight']) as $link_id => $info) {
      if ($link_id == 'link_current') {
        // Do nothing. Changing the weight of the current link will be handled
        // by MenuLinkContentForm instead.
        continue;
      }

      /** @var \Drupal\Core\Menu\MenuLinkInterface $link */
      $menu_link_manager->updateDefinition($link_id, ['weight' => $info['weight']]);
    }
  }
  catch (Exception $e) {
    $transaction->rollback();
    watchdog_exception('menu_link_weight', $e);
  }
}

/**
 * Process callback for the menu link weight element.
 */
function menu_link_weight_extended_menu_ui_element_process($element, FormStateInterface $form_state, &$complete_form) {
  // Find out which parent to select after loading (or AJAX reloading) the form.
  $parent_element = $complete_form['menu_parent'];
  $parent_value = _menu_link_weight_menu_ui_get_parent_value_from_element($parent_element, $form_state);
  if (strstr($parent_value, ':')) {
    // The parent value is of the form "$menu_name:" or
    // "$menu_name:$link_plugin_id".
    /** @see \Drupal\Core\Menu\MenuParentFormSelector::getParentSelectOptions() */
    list($menu_name, $parent_id) = explode(':', $parent_value, 2);
  }
  else {
    return $element;
  }

  // Get the menu title for the parent based on the current menu selection.
  $url = Url::fromRoute('entity.menu.edit_form', array('menu' => $menu_name));
  if ($parent_id === '') {
    $label = Menu::load($menu_name)->label();
  }
  else {
    /** @var \Drupal\Core\Menu\MenuLinkManagerInterface $menu_link_manager */
    $menu_link_manager = \Drupal::service('plugin.manager.menu.link');
    /** @var \Drupal\Core\Menu\MenuLinkInterface $parent_link */
    $parent_link = $menu_link_manager->createInstance($parent_id);
    $label = $parent_link->getTitle();

    /** @see menu_link_weight_form_menu_form_alter() */
    $html_id = 'menu-link-weight-link-id-' . Html::getId($parent_id);
    $url->setOption('fragment', $html_id);
  }
  $generated_url = $url->toString(TRUE);
  $generated_url->applyTo($element);
  $element['#description'] = t('Change the weight of the links within the <a href=":url">@menu</a> menu by dragging the items up/down.', array(
    ':url' => $generated_url->getGeneratedUrl(),
    '@menu' => $label,
  ));

  // Get the ID for the current menu link.
  $current_mlid = $form_state->getBuildInfo()['callback_object']->getEntity()->getPluginId();

  // Get the title for the current menu link.
  $new_item_title = $form_state->hasValue(['link_title']) ? $form_state->getValue(['link_title']) : $form_state->getBuildInfo()['callback_object']->getEntity()->get('title')->value;

  // Get the options array we will use to build the form elements for every
  // menu link.
  $options = _menu_link_weight_get_options($menu_name, $parent_id, $current_mlid, $new_item_title);
  // Allow other modules to reorder the options, if applicable.
  if ($relative_position = $form_state->get(['menu_link_weight_relative_position', $parent_value])) {
    $options = _menu_link_weight_reorder_options($options, $relative_position);
  }
  // Build the form elements using the options array.
  foreach ($options as $link_id => $info) {
    $element['table'][$link_id] = array(
      '#attributes' => ['class' => ['draggable']],
      '#weight' => $info['weight'],
      'name' => $info['title'],
      'weight' => array(
        '#type' => 'weight',
        '#title' => t('Weight'),
        '#default_value' => $info['weight'],
        '#delta' => MENU_LINK_WEIGHT_MAX_DELTA,
        '#title_display' => 'invisible',
        '#attributes' => ['class' => ['menu-link-weight-item-weight']],
      ),
    );
    if ($link_id != 'link_current') {
      // Save the current weight in the database of the rendered menu links
      // into the form, so that we can give an error if the weights have changed
      // by the time the form is submitted.
      $complete_form['link']['db_weights'][$link_id] = array(
        '#type' => 'hidden',
        '#value' => $info['db_weight'],
      );
    }
  }
  return $element;
}


/**
 * Gets the menu link parent value from the form.
 *
 * Helper function for menu link weight process callback.
 *
 * @param array $parent_element
 *   Menu link parent form element.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return string
 *   Menu link
 */
function _menu_link_weight_menu_ui_get_parent_value_from_element(array $parent_element, FormStateInterface $form_state) {
  if ($form_state->hasValue(['menu_parent'])) {
    $value = $form_state->getValue(['menu_parent']);
  }
  else {
    $value = !empty($parent_element['#value']) ? $parent_element['#value'] : $parent_element['#default_value'];
  }
  return $value;
}


/**
 * AJAX callback that returns the updated menu_link_weight element.
 *
 * This will update whenever the selection of the menu link parent changes.
 */
function menu_link_weight_menu_ui_parent_ajax_callback($form, FormStateInterface $form_state) {
  return $form['menu_link_weight'];
}

function menu_link_weight_extended_menu_ui_set_link_weight($entity_type, $entity, $form, FormStateInterface $form_state) {
  $weight = $form_state->getValue(['menu', 'menu_link_weight', 'link_current', 'weight']);
  $entity->weight->value = $weight;
}
